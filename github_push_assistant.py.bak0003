#!/usr/bin/env python3
"""
GitHub Push Assistant with D3.js & Asciinema (Upgraded)
- Runs end-to-end: record, push, visualize
- No hidden output: all commands logged and shown (tee-style)
"""

import os
import subprocess
import sys
import shutil
import webbrowser
from datetime import datetime

LOGFILE = "github_push_assistant.log"

def log_header():
    """Write session header to log"""
    with open(LOGFILE, "a") as f:
        f.write("\n" + "="*80 + "\n")
        f.write(f"GitHub Push Assistant session: {datetime.now()}\n")
        f.write("="*80 + "\n")

def run_command(cmd, cwd=None, check=False):
    """
    Run a shell command, streaming live output to terminal and logfile.
    Returns exit code.
    """
    print(f"\n$ {' '.join(cmd)}")
    with open(LOGFILE, "a") as logf:
        process = subprocess.Popen(
            cmd,
            cwd=cwd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
        )
        for line in iter(process.stdout.readline, ""):
            sys.stdout.write(line)
            sys.stdout.flush()
            logf.write(line)
        process.wait()
        return process.returncode

def detect_tools():
    """Check for required tools and log versions"""
    tools = {
        "git": ["git", "--version"],
        "gh": ["gh", "--version"],
        "asciinema": ["asciinema", "--version"],
        "docker": ["docker", "--version"],
    }
    detected = {}
    for name, cmd in tools.items():
        print(f"$ {' '.join(cmd)}")
        try:
            output = subprocess.check_output(cmd, text=True, stderr=subprocess.STDOUT)
            print(output.strip())
            with open(LOGFILE, "a") as f:
                f.write(output)
            detected[name] = True
        except Exception as e:
            print(f"{name} not detected: {e}")
            detected[name] = False
    return detected

def record_first_run():
    """Record first run with asciinema (overwrite if exists)"""
    cast_file = "github_push_assistant_first_run.cast"
    if os.path.exists(cast_file):
        os.remove(cast_file)
    print(f"üé• Recording session to {cast_file}")
    run_command(["asciinema", "rec", "--overwrite", cast_file, "--command", "echo 'Session recorded'"])

def attempt_docker_flow(project_path):
    """Try Docker build/run, return True if success"""
    ret = run_command(["docker", "build", "-t", "github_push_assistant", project_path])
    if ret != 0:
        print("‚ö†Ô∏è Docker build failed, falling back to native execution.")
        return False
    ret = run_command(["docker", "run", "--rm", "-v", f"{project_path}:/app", "github_push_assistant"])
    return ret == 0

def native_git_push(project_path):
    """Fallback native git push"""
    run_command(["git", "add", "-A"], cwd=project_path)
    run_command(["git", "commit", "-m", "Automated commit"], cwd=project_path)
    run_command(["git", "push"], cwd=project_path)

def generate_d3_visualization(project_path):
    """Generate commit visualization HTML"""
    html_path = os.path.join(project_path, "commit_visualization.html")
    commits = subprocess.check_output(
        ["git", "log", "--pretty=format:%h|%s", "-n", "10"],
        cwd=project_path,
        text=True
    ).strip().splitlines()

    data = []
    for i, line in enumerate(commits):
        try:
            sha, msg = line.split("|", 1)
        except ValueError:
            continue
        data.append({"id": sha, "message": msg, "x": 100 + i*80, "y": 200})

    html = f"""<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>D3.js Commit Visualization</title>
<script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>
<h1>Commit History Visualization</h1>
<svg id="chart" width="1000" height="400"></svg>
<script>
const commits = {data};

const svg = d3.select("#chart");

svg.selectAll("circle")
   .data(commits)
   .enter()
   .append("circle")
   .attr("cx", d => d.x)
   .attr("cy", d => d.y)
   .attr("r", 20)
   .style("fill", "steelblue");

svg.selectAll("text")
   .data(commits)
   .enter()
   .append("text")
   .attr("x", d => d.x)
   .attr("y", d => d.y + 40)
   .attr("text-anchor", "middle")
   .text(d => d.message);
</script>
</body>
</html>
"""
    with open(html_path, "w") as f:
        f.write(html)
    print(f"‚úÖ Visualization written to {html_path}")
    webbrowser.open(f"file://{html_path}")

def main():
    log_header()
    tools = detect_tools()
    project_path = os.getcwd()
    print(f"Working in: {project_path}")

    if tools["asciinema"]:
        record_first_run()

    docker_ok = False
    if tools["docker"]:
        docker_ok = attempt_docker_flow(project_path)

    if not docker_ok:
        print("‚û°Ô∏è Falling back to native git push")
        native_git_push(project_path)

    generate_d3_visualization(project_path)
    print("‚úÖ Workflow complete. See log file:", LOGFILE)

if __name__ == "__main__":
    main()
